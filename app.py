import streamlit as st
import folium
import processing  # –Ω–∞—à –º–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º
import branca.colormap as cm
import pandas as pd
from streamlit_folium import folium_static

# ---------------------------------------------------------------------------------
# –®–ê–ì –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•: –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ
# ---------------------------------------------------------------------------------
DATASET_PATH = "data/geo_locations_astana_hackathon"

# ---------------------------------------------------------------------------------
# ------------------- –î–ê–õ–¨–®–ï –ö–û–î –ú–ï–ù–Ø–¢–¨ –ù–ï –ù–£–ñ–ù–û ----------------------------------
# ---------------------------------------------------------------------------------

st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª–∏–∑ –ì–µ–æ—Ç—Ä–µ–∫–æ–≤ (–ü—Ä–æ—Ç–æ—Ç–∏–ø)")
st.title("üó∫Ô∏è –ü—Ä–æ—Ç–æ—Ç–∏–ø: –¢–µ–ø–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –ü–∏–∫–∞–ø–æ–≤ –∏ –î—Ä–æ–ø–æ—Ñ—Ñ–æ–≤")
st.markdown("–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö –∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ—á–µ–∫ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∑–æ–Ω —Å–ø—Ä–æ—Å–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")

# --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –±–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (pickups/dropoffs -> H3-–∞–≥—Ä–µ–≥–∞—Ü–∏—è) ---
pickups_demand, dropoffs_demand = processing.load_and_process_points(DATASET_PATH)
if pickups_demand is None:
    st.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–∞—Å—å. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
    st.stop()

st.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞!")
st.markdown("---")

# ----- –ë–õ–û–ö –û–¢–õ–ê–î–ö–ò (–º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –ø–æ–∑–∂–µ) -----
st.subheader("–û–¢–õ–ê–î–ö–ê: –°–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞")
st.write("–î–∞—Ç–∞—Ñ—Ä–µ–π–º –ü–∏–∫–∞–ø–æ–≤ (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫):")
st.dataframe(pickups_demand.head())
st.write(f"**–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö H3-–∑–æ–Ω –¥–ª—è –ü–∏–∫–∞–ø–æ–≤: {len(pickups_demand)}**")
st.write("–î–∞—Ç–∞—Ñ—Ä–µ–π–º –î—Ä–æ–ø–æ—Ñ—Ñ–æ–≤ (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫):")
st.dataframe(dropoffs_demand.head())
st.write(f"**–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö H3-–∑–æ–Ω –¥–ª—è –î—Ä–æ–ø–æ—Ñ—Ñ–æ–≤: {len(dropoffs_demand)}**")
st.markdown("---")
# ----- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –û–¢–õ–ê–î–ö–ò -----

# --- 2. –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
st.sidebar.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π")
map_type = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã:",
    ('–ö–∞—Ä—Ç–∞ –°–ø—Ä–æ—Å–∞ (–ü–∏–∫–∞–ø—ã)', '–ö–∞—Ä—Ç–∞ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π (–î—Ä–æ–ø–æ—Ñ—Ñ—ã)')
)

st.sidebar.markdown("---")
st.sidebar.subheader("–¶–µ–Ω–Ω–æ—Å—Ç—å (Value)")
st.sidebar.info(
    """
    **–ü—Ä–æ–±–ª–µ–º–∞:** –í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –∑–Ω–∞—é—Ç, –≥–¥–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —Å–ø—Ä–æ—Å (–ø–∏–∫–∞–ø—ã) –∏ –∫—É–¥–∞ —á–∞—â–µ –≤—Å–µ–≥–æ –µ–¥—É—Ç –ª—é–¥–∏ (–¥—Ä–æ–ø–æ—Ñ—Ñ—ã).

    **–†–µ—à–µ–Ω–∏–µ:** –≠—Ç–æ—Ç –ø—Ä–æ—Ç–æ—Ç–∏–ø –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ç–æ—á–∫–∏ –°–¢–ê–†–¢–ê –∏ –§–ò–ù–ò–®–ê –≤—Å–µ—Ö –ø–æ–µ–∑–¥–æ–∫.
    """
)

# –Ω–æ–≤—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
view_mode = st.sidebar.radio(
    "–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    ["H3 —Ç–µ–ø–ª–æ–∫–∞—Ä—Ç–∞", "–õ–∏–Ω–∏–∏ start‚Üífinish"],
    index=0
)

# --- 3. –í–µ—Ç–∫–∞ "–õ–∏–Ω–∏–∏ start‚Üífinish" (–æ—Ç—Ä–µ–∑–∫–∏ –ê‚Üí–ë –±–µ–∑ —Ç—Ä–µ–∫–∞) ---
if view_mode == "–õ–∏–Ω–∏–∏ start‚Üífinish":
    st.header("–õ–∏–Ω–∏–∏ –æ—Ç —Ç–æ—á–∫–∏ –ê (–ø–∏–∫–∞–ø) –¥–æ —Ç–æ—á–∫–∏ –ë (–¥—Ä–æ–ø–æ—Ñ—Ñ)")

    # –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤–µ—Å–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä
    max_trips = st.sidebar.number_input(
        "–°–∫–æ–ª—å–∫–æ –ª–∏–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç—å (–ø–µ—Ä–≤—ã–µ N –ø–æ–µ–∑–¥–æ–∫)",
        min_value=100, max_value=10000, value=2000, step=100
    )

    seg = processing.load_start_finish_segments(DATASET_PATH, max_trips=max_trips)

    if seg.empty:
        st.warning("–ù–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        st.stop()

    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
    selected_trip = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏ –ø–æ–µ–∑–¥–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è",
        options=seg["randomized_id"].unique()
    )

    # –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ –¥–∞–Ω–Ω—ã–º (–∏–ª–∏ fallback ‚Äî –ê—Å—Ç–∞–Ω–∞)
    try:
        map_center = [float(seg["lat_start"].mean()), float(seg["lng_start"].mean())]
        if any(pd.isna(map_center)):
            map_center = [51.12, 71.43]
    except Exception:
        map_center = [51.12, 71.43]

    # –†–∏—Å—É–µ–º –∫–∞—Ä—Ç—É
    m = folium.Map(location=map_center, zoom_start=11, tiles="CartoDB dark_matter")

    for _, r in seg.iterrows():
        start = [float(r["lat_start"]), float(r["lng_start"])]
        end   = [float(r["lat_end"]),   float(r["lng_end"])]

        if r["randomized_id"] == selected_trip:
            color = "red"
            weight = 4
            opacity = 1.0
        else:
            color = "cyan"
            weight = 2
            opacity = 0.2  # –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–µ–¥–Ω—ã–µ

        # –õ–∏–Ω–∏—è
        folium.PolyLine(
            locations=[start, end],
            color=color,
            weight=weight,
            opacity=opacity,
            tooltip=f"Trip ID: {r['randomized_id']}"
        ).add_to(m)

        # –¢–æ—á–∫–∞ –ê (Start) ‚Äî –∑–µ–ª—ë–Ω–∞—è
        folium.CircleMarker(
            location=start,
            radius=4,
            color="green",
            fill=True,
            fill_color="green",
            fill_opacity=1,
            tooltip="Start"
        ).add_to(m)

        # –¢–æ—á–∫–∞ –ë (Finish) ‚Äî –∫—Ä–∞—Å–Ω–∞—è
        folium.CircleMarker(
            location=end,
            radius=4,
            color="red",
            fill=True,
            fill_color="red",
            fill_opacity=1,
            tooltip="Finish"
        ).add_to(m)

    folium_static(m, width=1200, height=600)

    st.info(f"–í—ã–¥–µ–ª–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∞: {selected_trip}. –°—Ç–∞—Ä—Ç = –∑–µ–ª—ë–Ω–∞—è —Ç–æ—á–∫–∞, —Ñ–∏–Ω–∏—à = –∫—Ä–∞—Å–Ω–∞—è —Ç–æ—á–∫–∞.")
    st.subheader("–ü—Ä–∏–º–µ—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏):")
    st.dataframe(seg.head(20))

    st.stop()

# --- 4. –í–µ—Ç–∫–∞ H3 —Ç–µ–ø–ª–æ–∫–∞—Ä—Ç—ã (—Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª) ---
# –≤—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
if map_type == '–ö–∞—Ä—Ç–∞ –°–ø—Ä–æ—Å–∞ (–ü–∏–∫–∞–ø—ã)':
    st.header("–ö–∞—Ä—Ç–∞ –°–ø—Ä–æ—Å–∞ (–ì–¥–µ –ª—é–¥–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –ø–æ–µ–∑–¥–∫–∏)")
    data_to_show = pickups_demand
    legend_title = "–ö–æ–ª-–≤–æ –ü–∏–∫–∞–ø–æ–≤"
else:
    st.header("–ö–∞—Ä—Ç–∞ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π (–ö—É–¥–∞ –ª—é–¥–∏ —á–∞—â–µ –≤—Å–µ–≥–æ –µ–¥—É—Ç)")
    data_to_show = dropoffs_demand
    legend_title = "–ö–æ–ª-–≤–æ –î—Ä–æ–ø–æ—Ñ—Ñ–æ–≤"

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
if data_to_show.empty:
    st.warning(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è '{map_type}' –ø—É—Å—Ç—ã. –ù–µ—á–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å. (–≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ª–æ–≥ –æ—Ç–ª–∞–¥–∫–∏ –≤—ã—à–µ).")
    st.stop()

# —Ä–µ–Ω–¥–µ—Ä H3-—Å–ª–æ—è
map_center = [51.12, 71.43]  # –ê—Å—Ç–∞–Ω–∞
m = folium.Map(location=map_center, zoom_start=11, tiles="CartoDB dark_matter")

# —Å—Ç—Ä–æ–∏–º –ø–æ–ª–∏–≥–æ–Ω—ã H3
geojson_data = processing.get_geojson_boundaries(data_to_show)
if not geojson_data.get("features"):
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–∏–≥–æ–Ω—ã H3 ‚Äî —Å–ø–∏—Å–æ–∫ features –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å –≤–µ—Ä—Å–∏—é h3 –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≥—Ä–∞–Ω–∏—Ü.")
    st.stop()

try:
    # —Ü–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞
    min_count = data_to_show['count'].min()
    max_count = data_to_show['count'].max()
    colormap = cm.linear.YlOrRd_09.scale(vmin=min_count, vmax=max_count)
    colormap.caption = legend_title

    # —Å—Ç–∏–ª—å –≥–µ–∫—Å–∞–≥–æ–Ω–æ–≤
    style_function = lambda x: {
        'fillColor': colormap(x['properties']['count']),
        'color': 'none',
        'fillOpacity': 0.7,
        'weight': 1,
    }

    # —Å–ª–æ–π GeoJSON
    folium.GeoJson(
        data=geojson_data,
        style_function=style_function,
        tooltip=folium.GeoJsonTooltip(
            fields=['h3_index', 'count'],
            aliases=['–ó–æ–Ω–∞ H3:', '–ö–æ–ª-–≤–æ:'],
            sticky=True
        )
    ).add_to(m)

    # –ª–µ–≥–µ–Ω–¥–∞
    colormap.add_to(m)

    with st.spinner("–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã... (–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)"):
        folium_static(m, width=1200, height=600)

except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ –∫–∞—Ä—Ç—ã (–¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–æ –∫–∞—Ä—Ç–∞ —É–ø–∞–ª–∞): {e}")

# —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–ø-20
st.subheader(f"–¢–æ–ø 20 '–≥–æ—Ä—è—á–∏—Ö' –∑–æ–Ω ({map_type}):")
st.dataframe(
    data_to_show[['h3_index', 'count']]
    .sort_values('count', ascending=False)
    .head(20)
    .set_index('h3_index')
)